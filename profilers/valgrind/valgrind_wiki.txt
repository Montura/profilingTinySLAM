-------------ABSTRACT-------------
Valgrind:

Links:
1) Cachegrind (http://valgrind.org/docs/manual/cg-manual.html)

Cachegrind simulates a machine with independent first-level instruction and data caches (I1 and D1), backed by a unified second-level cache (L2).

2) Callgrind (http://valgrind.org/docs/manual/cl-manual.html)

Callgrind is a profiling tool that records the call history among functions in a program's run as a call-graph.


-------------Profiling-------------
Before run you should compile source with flag -g:

g++ -g main.cpp -o main_valgrind (При компиляции использовать флаг -g)

Run Cachegrind and annotate:

1) $ valgrind --tool=cachegrind --cache-sim=yes --branch-sim=yes ./main_valgrind 
2) $ callgrind_annotate cachegrind.out.13426 main.cpp (--auto=yes) > callgrind_annotate_cachegrind.out.txt (самый интересный файл)
2) $ cg_annotate cachegrind.out.13426 main.cpp (--auto=yes) > cg_annotate_cachegrind.out.txt (не показывает статистику по линиям кода)


Run Callgrind and annotate (вообще ради графа вызовов + используется Kcachegrind для визуализации):

1) $ valgrind --tool=callgrind --dump-line=yes --dump-instr=yes ./main_valgrind
2) $ callgrind_annotate callgrind.out.12886 main.cpp (--auto=yes) > callgrind_annotate_callgrind.out.txt (покажет кол-во вызовов каждой строки кода)
3) $ cg_annotate callgrind.out.12886 (не сработает, т.к. callgrind - расширение cachegrind)





